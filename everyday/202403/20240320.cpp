/*
1969. 数组元素的最小非零乘积

给你一个正整数 p 。你有一个下标从 1 开始的数组 nums ，这个数组包含范围 [1, 2p -
1] 内所有整数的二进制形式（两端都 包含）。你可以进行以下操作 任意 次：

从 nums 中选择两个元素 x 和 y  。
选择 x 中的一位与 y 对应位置的位交换。对应位置指的是两个整数 相同位置
的二进制位。 比方说，如果 x = 1101 且 y = 0011 ，交换右边数起第 2 位后，我们得到
x = 1111 和 y = 0001 。

请你算出进行以上操作 任意次 以后，nums 能得到的 最小非零 乘积。将乘积对 109 + 7
取余 后返回。

注意：答案应为取余 之前 的最小值。

示例 1：

输入：p = 1
输出：1
解释：nums = [1] 。
只有一个元素，所以乘积为该元素。

示例 2：

输入：p = 2
输出：6
解释：nums = [01, 10, 11] 。
所有交换要么使乘积变为 0 ，要么乘积与初始乘积相同。
所以，数组乘积 1 * 2 * 3 = 6 已经是最小值。

示例 3：

输入：p = 3
输出：1512
解释：nums = [001, 010, 011, 100, 101, 110, 111]
- 第一次操作中，我们交换第二个和第五个元素最左边的数位。
    - 结果数组为 [001, 110, 011, 100, 001, 110, 111] 。
- 第二次操作中，我们交换第三个和第四个元素中间的数位。
    - 结果数组为 [001, 110, 001, 110, 001, 110, 111] 。
数组乘积 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512 是最小乘积。

提示：

1 <= p <= 60
*/

#include <iostream>
#include <vector>

using namespace std;

class Solution {
    const int mod = 1'000'000'007;

   public:
    int minNonZeroProduct(int p) {
        long long x = ((1LL << p) - 1) % mod, y = ((1LL << p) - 2) % mod,
                  z = (1LL << (p - 1)) - 1;
        for (; z; z >>= 1) {
            if (z & 1)
                x = x * y % mod;
            y = y * y % mod;
        }
        return x;
    }
};

// 所有数字分2半，一半[1，2^(p-1)-1]，另外一半[2^(p-1), 2^(p)-1]

// eg,p=3  1,2,3; 4,5,6,7
// (1, 6), (2, 5), (3, 4) 7
// 交换前(001,110)  (010,101)  (011,100)  111
// 交换后(001,110)  (001,110)  (001,110)  111

// 乘积  7*6^3  即  [2^(p)-1] * [2^(p)-2] ^ [2^(p-1)-1]
// 令 x = 2^(p)-1，y = 2^(p)-2，z = 2^(p-1)-1

// 上式用快速幂 pow(y,z)

/* if z odd
7, 1*y, y2;
3, y*y2, y4;
1, y3*y4, y8
*/

/* if z even
12, o, y2;
6, o, y4;
3, 1*y4, y8;
1, y4*y8, y16
*/

int main() {
    Solution sol;
    cout << sol.minNonZeroProduct(1) << endl;
    cout << sol.minNonZeroProduct(2) << endl;
    cout << sol.minNonZeroProduct(3) << endl;
    return 0;
}